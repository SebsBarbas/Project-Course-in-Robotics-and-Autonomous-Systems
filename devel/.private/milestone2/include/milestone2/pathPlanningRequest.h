// Generated by gencpp from file milestone2/pathPlanningRequest.msg
// DO NOT EDIT!


#ifndef MILESTONE2_MESSAGE_PATHPLANNINGREQUEST_H
#define MILESTONE2_MESSAGE_PATHPLANNINGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace milestone2
{
template <class ContainerAllocator>
struct pathPlanningRequest_
{
  typedef pathPlanningRequest_<ContainerAllocator> Type;

  pathPlanningRequest_()
    : x0(0.0)
    , y0(0.0)
    , yaw0(0.0)
    , targetSign()  {
    }
  pathPlanningRequest_(const ContainerAllocator& _alloc)
    : x0(0.0)
    , y0(0.0)
    , yaw0(0.0)
    , targetSign(_alloc)  {
  (void)_alloc;
    }



   typedef float _x0_type;
  _x0_type x0;

   typedef float _y0_type;
  _y0_type y0;

   typedef float _yaw0_type;
  _yaw0_type yaw0;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _targetSign_type;
  _targetSign_type targetSign;





  typedef boost::shared_ptr< ::milestone2::pathPlanningRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::milestone2::pathPlanningRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pathPlanningRequest_

typedef ::milestone2::pathPlanningRequest_<std::allocator<void> > pathPlanningRequest;

typedef boost::shared_ptr< ::milestone2::pathPlanningRequest > pathPlanningRequestPtr;
typedef boost::shared_ptr< ::milestone2::pathPlanningRequest const> pathPlanningRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::milestone2::pathPlanningRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::milestone2::pathPlanningRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::milestone2::pathPlanningRequest_<ContainerAllocator1> & lhs, const ::milestone2::pathPlanningRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x0 == rhs.x0 &&
    lhs.y0 == rhs.y0 &&
    lhs.yaw0 == rhs.yaw0 &&
    lhs.targetSign == rhs.targetSign;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::milestone2::pathPlanningRequest_<ContainerAllocator1> & lhs, const ::milestone2::pathPlanningRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace milestone2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::milestone2::pathPlanningRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::milestone2::pathPlanningRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::milestone2::pathPlanningRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::milestone2::pathPlanningRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::milestone2::pathPlanningRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::milestone2::pathPlanningRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::milestone2::pathPlanningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b9c7c668b24c524f238db36f3c23676";
  }

  static const char* value(const ::milestone2::pathPlanningRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b9c7c668b24c524ULL;
  static const uint64_t static_value2 = 0xf238db36f3c23676ULL;
};

template<class ContainerAllocator>
struct DataType< ::milestone2::pathPlanningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "milestone2/pathPlanningRequest";
  }

  static const char* value(const ::milestone2::pathPlanningRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::milestone2::pathPlanningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x0\n"
"float32 y0\n"
"float32 yaw0\n"
"string targetSign\n"
;
  }

  static const char* value(const ::milestone2::pathPlanningRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::milestone2::pathPlanningRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x0);
      stream.next(m.y0);
      stream.next(m.yaw0);
      stream.next(m.targetSign);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pathPlanningRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::milestone2::pathPlanningRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::milestone2::pathPlanningRequest_<ContainerAllocator>& v)
  {
    s << indent << "x0: ";
    Printer<float>::stream(s, indent + "  ", v.x0);
    s << indent << "y0: ";
    Printer<float>::stream(s, indent + "  ", v.y0);
    s << indent << "yaw0: ";
    Printer<float>::stream(s, indent + "  ", v.yaw0);
    s << indent << "targetSign: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.targetSign);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MILESTONE2_MESSAGE_PATHPLANNINGREQUEST_H
